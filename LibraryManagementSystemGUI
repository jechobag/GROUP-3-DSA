import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;

public class LibraryManagementSystemGUI extends JFrame {
    private Library library = new Library();

public LibraryManagementSystemGUI() {
        
        ImageIcon img = new ImageIcon(LibraryManagementSystemGUI.class.getResource("/book blue.png"));
        this.setIconImage(img.getImage());
        
        setTitle("Library Management System");
        setSize(600, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Set Look and Feel
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }
        JTextArea displayArea = new JTextArea(15, 40);
        displayArea.setEditable(false);
        displayArea.setFont(new Font("SansSerif", Font.BOLD, 14));
        displayArea.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        displayArea.setBackground(new Color(216, 216, 216)); // Set background color

        JButton addButton = new JButton("Add Book");
        JButton removeButton = new JButton("Remove Book by Title");
        JButton searchButton = new JButton("Search Book by Index");
        JButton displayButton = new JButton("Display All Books");
        JButton totalButton = new JButton("Total Number of Books");
        JButton exitButton = new JButton("Exit"); // Exit button

        // Set font, background color, and border for buttons
        Font buttonFont = new Font("SansSerif", Font.BOLD, 14);
        Color buttonColor = new Color(22,102,186);

        JButton[] buttons = {addButton, removeButton, searchButton, displayButton, totalButton, exitButton};
        for (JButton button : buttons) {
            button.setFont(buttonFont);
            button.setBackground(buttonColor);
            button.setForeground(Color.WHITE);
            button.setOpaque(true); // Ensures the background color is painted
            button.setBorderPainted(false); // Disables the border painting
            button.setFocusPainted(false);  // Removes the focus border
        }

        // Create a font for labels
        Font labelFont = new Font("SansSerif", Font.BOLD, 14);

        // Layout setup
        getContentPane().setLayout(new BorderLayout());
        getContentPane().setBackground(Color.GRAY); // Set background color of the frame

        JPanel inputPanel = new JPanel();
        inputPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
        inputPanel.setBackground(new Color(22, 102, 186)); // Set background color of the input panel
        GridBagLayout gbl_inputPanel = new GridBagLayout();
        gbl_inputPanel.columnWidths = new int[]{277, 87, 200, 0};
        gbl_inputPanel.rowHeights = new int[]{20, 20, 0};
        gbl_inputPanel.columnWeights = new double[]{1.0, 0.0, 1.0, Double.MIN_VALUE};
        gbl_inputPanel.rowWeights = new double[]{0.0, 0.0, Double.MIN_VALUE};
        inputPanel.setLayout(gbl_inputPanel);
                
                JLabel LogoPic = new JLabel("Library Management System");
                LogoPic.setFont(new Font("SansSerif", Font.BOLD, 16));
                LogoPic.setForeground(Color.WHITE);
                LogoPic.setIcon(new ImageIcon(LibraryManagementSystemGUI.class.getResource("/book.png")));
                GridBagConstraints gbc_LogoPic = new GridBagConstraints();
                gbc_LogoPic.gridheight = 2;
                gbc_LogoPic.insets = new Insets(0, 0, 5, 5);
                gbc_LogoPic.gridx = 0;
                gbc_LogoPic.gridy = 0;
                inputPanel.add(LogoPic, gbc_LogoPic);
        
                JLabel bookLabel = new JLabel("Book Title:");
                bookLabel.setHorizontalAlignment(SwingConstants.RIGHT);
                bookLabel.setForeground(Color.WHITE);
                bookLabel.setFont(labelFont); // Set font for book title label
                
                        GridBagConstraints gbc_bookLabel = new GridBagConstraints();
                        gbc_bookLabel.fill = GridBagConstraints.BOTH;
                        gbc_bookLabel.insets = new Insets(0, 0, 5, 5);
                        gbc_bookLabel.gridx = 1;
                        gbc_bookLabel.gridy = 0;
                        inputPanel.add(bookLabel, gbc_bookLabel);
        
                // Create components
                JTextField bookField = new JTextField(20);
                GridBagConstraints gbc_bookField = new GridBagConstraints();
                gbc_bookField.fill = GridBagConstraints.BOTH;
                gbc_bookField.insets = new Insets(0, 0, 5, 0);
                gbc_bookField.gridx = 2;
                gbc_bookField.gridy = 0;
                inputPanel.add(bookField, gbc_bookField);

        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(3, 2, 10, 10));
        buttonPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
        buttonPanel.setBackground(Color.WHITE); // Set background color of the button panel
        buttonPanel.add(addButton);
        buttonPanel.add(removeButton);
        buttonPanel.add(searchButton);
        buttonPanel.add(displayButton);
        buttonPanel.add(totalButton);
        buttonPanel.add(exitButton); // Add exit button to the panel

        getContentPane().add(inputPanel, BorderLayout.NORTH);
        JLabel indexLabel = new JLabel("Index:");
        indexLabel.setHorizontalAlignment(SwingConstants.RIGHT);
        indexLabel.setForeground(Color.WHITE);
        indexLabel.setFont(labelFont); // Set font for index label
        GridBagConstraints gbc_indexLabel = new GridBagConstraints();
        gbc_indexLabel.fill = GridBagConstraints.BOTH;
        gbc_indexLabel.insets = new Insets(0, 0, 0, 5);
        gbc_indexLabel.gridx = 1;
        gbc_indexLabel.gridy = 1;
        inputPanel.add(indexLabel, gbc_indexLabel);
        JTextField indexField = new JTextField(5);
        GridBagConstraints gbc_indexField = new GridBagConstraints();
        gbc_indexField.fill = GridBagConstraints.BOTH;
        gbc_indexField.gridx = 2;
        gbc_indexField.gridy = 1;
        inputPanel.add(indexField, gbc_indexField);
        getContentPane().add(new JScrollPane(displayArea), BorderLayout.CENTER);
        getContentPane().add(buttonPanel, BorderLayout.SOUTH);

        // Add book action
        addButton.addActionListener(e -> {
            String book = bookField.getText();
            if (!book.isEmpty()) {
                library.add(book);
                displayArea.setText("Book added: " + book + "\n" + library.displayBooks());
                bookField.setText("");
            } else {
                JOptionPane.showMessageDialog(null, "Please enter a book title.");
            }
        });

       // Remove book by title action
        removeButton.addActionListener(e -> {
            String book = bookField.getText();
            if (!book.isEmpty()) {
                boolean removed = library.remove(book);
                if (removed) {
                    displayArea.setText("Book removed: " + book + "\n" + library.displayBooks());
                } else {
                    displayArea.setText("Book not found: " + book);
                }
                bookField.setText("");
            } else {
                JOptionPane.showMessageDialog(null, "Please enter a book title.");
            }
        });

      // Search book by index action
        searchButton.addActionListener(e -> {
            try {
                int index = Integer.parseInt(indexField.getText()) - 1;
                String book = library.get(index);
                displayArea.setText("Book at index " + (index + 1) + ": " + book);
            } catch (NumberFormatException | IndexOutOfBoundsException ex) {
                JOptionPane.showMessageDialog(null, "Invalid index. Please enter a valid number.");
            }
        });

    // Display all books action
        displayButton.addActionListener(e -> displayArea.setText(library.displayBooks()));

        // Display total number of books action
        totalButton.addActionListener(e -> displayArea.setText("Total Number of Books: " + library.size()));

        // Exit button action
        exitButton.addActionListener(e -> System.exit(0)); // Exits the application

        // Initialize the GUI
        setVisible(true);
    }

private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);


        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addContainerGap(211, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addContainerGap(146, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

public static void main(String[] args) {
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LibraryManagementSystemGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LibraryManagementSystemGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LibraryManagementSystemGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LibraryManagementSystemGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LibraryManagementSystemGUI().setVisible(true);
            }
        });
}

class Library {
    private String[] books;
    private int size;
    private static final int INITIAL_CAPACITY = 10;

    public Library() {
        books = new String[INITIAL_CAPACITY];
        size = 0;
    }

    public void add(String book) {
        ensureCapacity();
        books[size] = book;
        size++;
    }

    private void ensureCapacity() {
        if (size == books.length) {
            String[] newBooks = new String[books.length * 2];
            System.arraycopy(books, 0, newBooks, 0, books.length);
            books = newBooks;
        }
    }

    public boolean remove(String book) {
        for (int i = 0; i < size; i++) {
            if (books[i].equalsIgnoreCase(book)) {
                for (int j = i; j < size - 1; j++) {
                    books[j] = books[j + 1];
                }
                books[size - 1] = null;
                size--;
                return true;
            }
        }
        return false;
    }

    public String get(int index) {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException("Index out of bounds");
        }
        return books[index];
    }

    public int size() {
        return size;
    }

    public String displayBooks() {
        if (size == 0) {
            return "No books available.";
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < size; i++) {
            sb.append((i + 1)).append(". ").append(books[i]).append("\n");
        }
        return sb.toString();
    }
}
}
