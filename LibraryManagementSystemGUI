import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;

public class LibraryManagementSystemGUI extends JFrame {
    private Library library = new Library();

public LibraryManagementSystemGUI() {
        setTitle("Library Management System");
        setSize(600, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Set Look and Feel
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }

        // Create components
        JTextField bookField = new JTextField(20);
        JTextField indexField = new JTextField(5);
        JTextArea displayArea = new JTextArea(15, 40);
        displayArea.setEditable(false);
        displayArea.setFont(new Font("SansSerif", Font.BOLD, 14));
        displayArea.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        displayArea.setBackground(Color.LIGHT_GRAY); // Set background color

        JButton addButton = new JButton("Add Book");
        JButton removeButton = new JButton("Remove Book by Title");
        JButton searchButton = new JButton("Search Book by Index");
        JButton displayButton = new JButton("Display All Books");
        JButton totalButton = new JButton("Total Number of Books");
        JButton exitButton = new JButton("Exit"); // Exit button

        // Set font, background color, and border for buttons
        Font buttonFont = new Font("SansSerif", Font.BOLD, 14);
        Color buttonColor = Color.BLUE;

        JButton[] buttons = {addButton, removeButton, searchButton, displayButton, totalButton, exitButton};
        for (JButton button : buttons) {
            button.setFont(buttonFont);
            button.setBackground(buttonColor);
            button.setForeground(Color.WHITE);
            button.setOpaque(true); // Ensures the background color is painted
            button.setBorderPainted(false); // Disables the border painting
            button.setFocusPainted(false);  // Removes the focus border
        }

        // Create a font for labels
        Font labelFont = new Font("SansSerif", Font.BOLD, 14);

        // Layout setup
        setLayout(new BorderLayout());
        getContentPane().setBackground(Color.GRAY); // Set background color of the frame

        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new GridLayout(2, 2, 10, 10));
        inputPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
        inputPanel.setBackground(Color.GRAY); // Set background color of the input panel

        JLabel bookLabel = new JLabel("Book Title:");
        bookLabel.setFont(labelFont); // Set font for book title label
        JLabel indexLabel = new JLabel("Index:");
        indexLabel.setFont(labelFont); // Set font for index label

        inputPanel.add(bookLabel);
        inputPanel.add(bookField);
        inputPanel.add(indexLabel);
        inputPanel.add(indexField);

        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(3, 2, 10, 10));
        buttonPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
        buttonPanel.setBackground(Color.GRAY); // Set background color of the button panel
        buttonPanel.add(addButton);
        buttonPanel.add(removeButton);
        buttonPanel.add(searchButton);
        buttonPanel.add(displayButton);
        buttonPanel.add(totalButton);
        buttonPanel.add(exitButton); // Add exit button to the panel

        add(inputPanel, BorderLayout.NORTH);
        add(new JScrollPane(displayArea), BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);

        // Add book action
        addButton.addActionListener(e -> {
            String book = bookField.getText();
            if (!book.isEmpty()) {
                library.add(book);
                displayArea.setText("Book added: " + book + "\n" + library.displayBooks());
                bookField.setText("");
            } else {
                JOptionPane.showMessageDialog(null, "Please enter a book title.");
            }
        });
       // Remove book by title action
        removeButton.addActionListener(e -> {
            String book = bookField.getText();
            if (!book.isEmpty()) {
                boolean removed = library.remove(book);
                if (removed) {
                    displayArea.setText("Book removed: " + book + "\n" + library.displayBooks());
                } else {
                    displayArea.setText("Book not found: " + book);
                }
                bookField.setText("");
            } else {
                JOptionPane.showMessageDialog(null, "Please enter a book title.");
            }
        });

      // Search book by index action
        searchButton.addActionListener(e -> {
            try {
                int index = Integer.parseInt(indexField.getText()) - 1;
                String book = library.get(index);
                displayArea.setText("Book at index " + (index + 1) + ": " + book);
            } catch (NumberFormatException | IndexOutOfBoundsException ex) {
                JOptionPane.showMessageDialog(null, "Invalid index. Please enter a valid number.");
            }
        });

    // Display all books action
        displayButton.addActionListener(e -> displayArea.setText(library.displayBooks()));

        // Display total number of books action
        totalButton.addActionListener(e -> displayArea.setText("Total Number of Books: " + library.size()));

        // Exit button action
        exitButton.addActionListener(e -> System.exit(0)); // Exits the application

        // Initialize the GUI
        setVisible(true);
    }
